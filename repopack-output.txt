================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-09T07:40:27.681Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
static/
  js/
    script.js
  styles.css
templates/
  index.html
.gitignore
app.py
generate_invoice.js
KUITANSI_FINAL.docx
package.json
Procfile
README.md
requirements.txt

================================================================
Repository Files
================================================================

================
File: static/js/script.js
================
let components = [];
let sortable;
let invoiceItems = [];

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded and parsed');
    const addInvoiceItemBtn = document.getElementById('add-invoice-item');
    if (addInvoiceItemBtn) {
        addInvoiceItemBtn.addEventListener('click', addInvoiceItem);
    }

    initializeApp();
});

function initializeApp() {
    const addComponentBtn = document.getElementById('add-component-btn');
    const generateSpjBtn = document.getElementById('generate-spj-btn');

    if (addComponentBtn) {
        addComponentBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Add component button clicked');
            addComponent();
        });
    } else {
        console.error('Add component button not found');
    }

    if (generateSpjBtn) {
        generateSpjBtn.addEventListener('click', generateSPJ);
    } else {
        console.error('Generate SPJ button not found');
    }

    const componentsList = document.getElementById('components-list');
    if (componentsList) {
        initializeSortable();
    } else {
        console.error('Components list not found');
    }

    updateComponentsList();
}

function initializeSortable() {
    const list = document.getElementById('components-list');
    if (list) {
        sortable = new Sortable(list, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            onEnd: function (evt) {
                const itemEl = evt.item;
                const newIndex = evt.newIndex;
                const oldIndex = evt.oldIndex;
                console.log(`Item moved from index ${oldIndex} to ${newIndex}`);
                
                const movedComponent = components.splice(oldIndex, 1)[0];
                components.splice(newIndex, 0, movedComponent);
            }
        });
    }
}

function updateComponentsList() {
    console.log('Updating components list');
    const list = document.getElementById('components-list');
    if (!list) {
        console.error('Components list element not found');
        return;
    }
    list.innerHTML = '';
    components.forEach((component, index) => {
        const div = document.createElement('div');
        div.className = 'component-item';
        div.setAttribute('data-id', index);
        let html = `
            <span class="drag-handle">â˜°</span>
            <span>${component.name}</span>
            <select onchange="handleTypeChange(event, ${index})">
                <option value="Foto" ${component.type === 'Foto' ? 'selected' : ''}>Foto</option>
                <option value="Dokumen" ${component.type === 'Dokumen' ? 'selected' : ''}>Dokumen</option>
                <option value="PDF" ${component.type === 'PDF' ? 'selected' : ''}>PDF</option>
            </select>
            <input type="file" accept="${getAcceptAttribute(component.type)}" onchange="handleFileUpload(event, ${index})">
            <span class="file-name">${component.file ? component.file.name : 'No file selected'}</span>
        `;
        
        if (component.type === 'Foto') {
            html += `
                <input type="text" placeholder="Image Caption" value="${component.caption || ''}" onchange="handleCaptionChange(event, ${index})">
            `;
        }
        
        html += `
            <button onclick="removeComponent(${index})">Hapus</button>
        `;
        
        div.innerHTML = html;
        list.appendChild(div);

        if (component.file) {
            const fileInput = div.querySelector('input[type="file"]');
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(component.file);
            fileInput.files = dataTransfer.files;
        }
    });

    console.log(`Updated list with ${components.length} components`);
}

function handleTypeChange(event, index) {
    const newType = event.target.value;
    components[index].type = newType;
    components[index].file = null; // Reset file when type changes
    console.log(`Type changed for component ${index}: ${newType}`);
    updateComponentsList();
}

function handleCaptionChange(event, index) {
    components[index].caption = event.target.value;
    console.log(`Caption changed for component ${index}: ${event.target.value}`);
}

function getAcceptAttribute(type) {
    switch (type) {
        case 'Foto':
            return '.png,.jpg,.jpeg,.gif';
        case 'Dokumen':
            return '.doc,.docx';
        case 'PDF':
            return '.pdf';
        default:
            return '.png,.jpg,.jpeg,.gif,.doc,.docx,.pdf';
    }
}

function addComponent() {
    console.log('Adding new component');
    const name = document.getElementById('new-component-name').value;
    const type = document.getElementById('new-component-type').value;
    
    console.log(`New component - Name: ${name}, Type: ${type}`);

    if (name) {
        components.push({ name, type, file: null });
        updateComponentsList();
        document.getElementById('new-component-name').value = '';
        console.log(`Component added. Total components: ${components.length}`);
    } else {
        console.warn('Component name is empty');
        alert('Component name cannot be empty!');
    }
}

function removeComponent(index) {
    console.log(`Removing component at index ${index}`);
    components.splice(index, 1);
    updateComponentsList();
}

function handleFileUpload(event, index) {
    const file = event.target.files[0];
    if (file) {
        console.log(`File selected for component ${index}: ${file.name}`);
        components[index].file = file;
        updateComponentsList();
    }
}

function addInvoiceItem() {
    const invoiceItemsContainer = document.getElementById('invoice-items');
    const newItem = document.createElement('div');
    newItem.className = 'invoice-item';
    newItem.innerHTML = `
        <input type="text" class="item-type" placeholder="Jenis Item">
        <input type="text" class="item-quantity" placeholder="Jumlah (e.g. 25 Orang)">
        <input type="text" class="item-price" placeholder="Harga">
        <input type="text" class="item-total" placeholder="Total">
        <button class="remove-item" title="Remove Item">&times;</button>
    `;
    invoiceItemsContainer.appendChild(newItem);

    newItem.querySelector('.remove-item').addEventListener('click', function() {
        invoiceItemsContainer.removeChild(newItem);
    });
}

function getInvoiceData() {
    const invoiceItems = Array.from(document.querySelectorAll('.invoice-item')).map((item, index) => ({
        order: index + 1,
        type: item.querySelector('.item-type').value,
        quant: item.querySelector('.item-quantity').value,
        price: item.querySelector('.item-price').value,
        total: item.querySelector('.item-total').value
    }));

    return {
        nomor: document.getElementById('invoice-number').value,
        pengirim: document.getElementById('invoice-sender').value,
        jumlah: document.getElementById('invoice-amount').value,
        terbilang: document.getElementById('invoice-amount-words').value,
        uraian: document.getElementById('invoice-description').value,
        item: invoiceItems,
        iotal: document.getElementById('invoice-total').value,
        tempatTanggal: `Tegalgondo, ${document.getElementById('date').value}`,
        penerima: {
            nama: document.getElementById('invoice-recipient-name').value,
            alamat: document.getElementById('invoice-recipient-address').value,
            noHP: document.getElementById('invoice-recipient-phone').value
        }
    };
}

function generateSPJ() {
    console.log('Generating SPJ');
    const templateName = document.getElementById('template-name').value;
    const tanggalAcara = document.getElementById('date').value;

    if (!templateName) {
        console.warn('Template name is empty');
        alert('Please enter template name!');
        return;
    }
    if (!tanggalAcara) {
        console.warn('Event date is empty');
        alert('Please enter event date!');
        return;
    }
    if (components.length === 0) {
        console.warn('No components added');
        alert('Please add at least one component!');
        return;
    }

    console.log(`Generating SPJ - Template: ${templateName}, Date: ${tanggalAcara}`);

    const formData = new FormData();
    formData.append('templateName', templateName);
    formData.append('tanggalAcara', tanggalAcara);
    formData.append('invoiceData', JSON.stringify(getInvoiceData()));

    components.forEach((component, index) => {
        if (component.file) {
            formData.append('files', component.file);
            formData.append(`file_types`, component.type);
            if (component.caption) {
                formData.append(`captions`, component.caption);
            }
            console.log(`Added component ${index} to form data: ${component.name} (${component.type})`);
        }
    });

    fetch('/generate', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('SPJ generated successfully');
            window.location.href = `/download/${data.file}`;
        } else {
            console.error(`Error generating SPJ: ${data.error}`);
            alert(`Error: ${data.error}`);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while generating the SPJ. Please try again.');
    });
}

================
File: static/styles.css
================
body {
    font-family: Arial, sans-serif;
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f0f0f0;
}

h1, h2, h3 {
    text-align: center;
    color: #333;
}

#template-form, #date-form, #add-component-form {
    background-color: white;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

input, select, button {
    font-family: inherit;
    font-size: 16px;
    margin: 5px 0;
    padding: 8px;
    width: 100%;
    box-sizing: border-box;
}

button {
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #45a049;
}

#add-component-btn, #generate-spj-btn {
    display: block;
    width: 200px;
    margin: 20px auto;
}

#components-list {
    background-color: white;
    border-radius: 5px;
    padding: 10px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.component-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    padding: 10px;
    background-color: #f0f0f0;
    border-radius: 5px;
}

.component-item select,
.component-item input[type="file"],
.component-item input[type="text"] {
    margin-right: 10px;
}

.component-item .file-name {
    margin-right: 10px;
    font-style: italic;
}

.component-item button {
    background-color: #ff4444;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
}

.component-item button:hover {
    background-color: #cc0000;
}

.drag-handle {
    cursor: move;
    padding: 5px;
    margin-right: 10px;
    color: #888;
}

.file-name {
    font-size: 0.9em;
    color: #666;
    margin-left: 10px;
}

.sortable-ghost {
    opacity: 0.5;
    background-color: #c8ebfb;
}

@media (max-width: 600px) {
    body {
        padding: 10px;
    }

    .component-item {
        flex-direction: column;
        align-items: flex-start;
    }

    .component-item button {
        margin-top: 10px;
    }
}

#invoice-form {
    background-color: white;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

#invoice-form input,
#invoice-form textarea {
    width: 100%;
    margin-bottom: 10px;
}

.invoice-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.invoice-item input {
    flex: 1;
    margin-right: 5px;
    min-width: 0; /* Allows inputs to shrink below their default size */
}

.invoice-item .remove-item {
    background-color: #ff4444;
    color: white;
    border: none;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 16px;
    padding: 0;
    margin-left: 5px;
}

.invoice-item .remove-item:hover {
    background-color: #cc0000;
}

/* Responsive design for smaller screens */
@media (max-width: 768px) {
    .invoice-item {
        flex-wrap: wrap;
    }

    .invoice-item input {
        flex-basis: calc(50% - 5px);
        margin-bottom: 5px;
    }

    .invoice-item .remove-item {
        margin-left: auto;
    }
}

.invoice-item button {
    background-color: #ff4444;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
}

#add-invoice-item {
    margin-bottom: 10px;
}

================
File: templates/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SPJ Generator</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>SPJ Generator</h1>
    <h2>Asisten Otomatis untuk Membuat SPJ</h2>
    
    <div id="template-form">
        <label for="template-name">Nama acara:</label>
        <input type="text" id="template-name" required>
    </div>

    <div id="date-form">
        <label for="date">Tanggal acara:</label>
        <input type="date" id="date" required>
    </div>

    <h3>Invoice Details</h3>
<div id="invoice-form">
    <input type="text" id="invoice-number" placeholder="Nomor Invoice">
    <input type="text" id="invoice-sender" placeholder="Pengirim">
    <input type="text" id="invoice-amount" placeholder="Jumlah (e.g. Rp 620.000,-)">
    <input type="text" id="invoice-amount-words" placeholder="Terbilang">
    <textarea id="invoice-description" placeholder="Uraian"></textarea>
    <h4>Items</h4>
    <div id="invoice-items">
        <div class="invoice-item">
            <input type="text" class="item-type" placeholder="Jenis Item">
            <input type="text" class="item-quantity" placeholder="Jumlah (e.g. 25 Orang)">
            <input type="text" class="item-price" placeholder="Harga">
            <input type="text" class="item-total" placeholder="Total">
        </div>
    </div>
    <button id="add-invoice-item">Add Item</button>
    <input type="text" id="invoice-total" placeholder="Total Invoice">
    <input type="text" id="invoice-recipient-name" placeholder="Nama Penerima">
    <input type="text" id="invoice-recipient-address" placeholder="Alamat Penerima">
    <input type="text" id="invoice-recipient-phone" placeholder="No. HP Penerima">
</div>

    <h3>Daftar Komponen</h3>
    <div id="components-list"></div>

    <div id="add-component-form">
        <input type="text" id="new-component-name" placeholder="Nama Komponen">
        <select id="new-component-type">
            <option value="Foto">Foto</option>
            <option value="Dokumen">Dokumen</option>
            <option value="PDF">PDF</option>
        </select>
        <button id="add-component-btn">Tambah komponen</button>
    </div>

    <button id="generate-spj-btn">Generate SPJ</button>

    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/plugins/multi-drag/MultiDrag.min.js"></script>
    <script src="{{ url_for('static', filename='js/script.js') }}"></script>
</body>
</html>

================
File: .gitignore
================
venv/
spj_generator_key.pem
__pycache__
*.pyc
uploads/
.env

================
File: app.py
================
import os
from flask import Flask, render_template, request, jsonify, send_file
from werkzeug.utils import secure_filename
from docx import Document
from docx.shared import Inches
from docxcompose.composer import Composer
from pdf2docx import Converter
import io
import boto3
from botocore.exceptions import ClientError
from PIL import Image
import tempfile
import logging
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import subprocess
import json
import re

app = Flask(__name__)

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
S3_BUCKET_NAME = os.environ.get('S3_BUCKET_NAME')

if not all([AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, S3_BUCKET_NAME]):
    print("Warning: One or more required environment variables are missing.")

# S3 configuration
s3_client = boto3.client(
    's3',
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY
)
s3_bucket_name=S3_BUCKET_NAME

ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', 'pdf'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def is_image(file_content):
    try:
        Image.open(io.BytesIO(file_content))
        return True
    except IOError:
        return False

def is_pdf(filename):
    return filename.lower().endswith('.pdf')

def convert_pdf_to_docx(pdf_content):
    try:
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as pdf_temp:
            pdf_temp.write(pdf_content)
            pdf_temp_path = pdf_temp.name

        docx_temp = tempfile.NamedTemporaryFile(suffix='.docx', delete=False)
        docx_temp_path = docx_temp.name
        docx_temp.close()

        # Convert PDF to DOCX
        cv = Converter(pdf_temp_path)
        cv.convert(docx_temp_path)
        cv.close()

        # Read the converted DOCX
        with open(docx_temp_path, 'rb') as docx_file:
            docx_content = docx_file.read()

        # Clean up temporary files
        os.unlink(pdf_temp_path)
        os.unlink(docx_temp_path)

        return docx_content
    except Exception as e:
        logger.error(f"Error converting PDF to DOCX: {str(e)}")
        return None

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def process_files(files, template_name, date):
    merged_doc = Document()
    composer = Composer(merged_doc)
    
    file_types = request.form.getlist('file_types')
    captions = request.form.getlist('captions')
    
    for file, file_type, caption in zip(files, file_types, captions + [None] * len(files)):
        try:
            logger.debug(f"Processing file: {file.filename}")
            file_content = file.read()
            if file_type == 'Foto':
                logger.debug(f"{file.filename} is an image")
                if caption:
                    para = merged_doc.add_paragraph()
                    para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    run = para.add_run(caption)
                    run.bold = True
                    run.font.size = Pt(12)
                pil_image = Image.open(io.BytesIO(file_content))
                img_stream = io.BytesIO()
                pil_image.save(img_stream, format=pil_image.format)
                img_stream.seek(0)
                merged_doc.add_picture(img_stream, width=Inches(6))  # Increased width for better visibility
            elif file_type == 'PDF':
                logger.debug(f"{file.filename} is a PDF")
                docx_content = convert_pdf_to_docx(file_content)
                if docx_content is None:
                    logger.error(f"PDF conversion failed for {file.filename}")
                    continue
                doc = Document(io.BytesIO(docx_content))
                composer.append(doc)
            else:
                logger.debug(f"{file.filename} is a document")
                doc = Document(io.BytesIO(file_content))
                composer.append(doc)
        except Exception as e:
            logger.error(f"Error processing {file.filename}: {str(e)}")
            continue
    
    output_filename = f'SPJ_{template_name}_{date}.docx'
    output_stream = io.BytesIO()
    composer.save(output_stream)
    output_stream.seek(0)
    
    # Upload to S3
    try:
        s3_client.upload_fileobj(output_stream, S3_BUCKET_NAME, output_filename)
    except Exception as e:
        logger.error(f"Error uploading to S3: {str(e)}")
        raise
    
    return output_filename

def generate_invoice(data):
    try:
        json_data = json.dumps(data)
        result = subprocess.run(['/app/.heroku/node/bin/node', 'generate_invoice.js', json_data], capture_output=True, text=True, check=True)
        
        # Extract the output path from the Node.js script output
        output_path_match = re.search(r'OUTPUT_PATH:(.+)', result.stdout)
        if output_path_match:
            return output_path_match.group(1).strip()
        else:
            raise Exception("Failed to extract output path from Node.js script")
    except subprocess.CalledProcessError as e:
        print(f"Error running Node.js script: {e}")
        print(f"Script error output: {e.stderr}")
        raise Exception("Failed to generate invoice")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate', methods=['POST'])
def generate_spj():
    template_name = request.form.get('templateName')
    date = request.form.get('tanggalAcara')
    files = request.files.getlist('files')
    invoice_data = json.loads(request.form.get('invoiceData'))
    
    if not template_name or not date or not files:
        return jsonify({'error': 'Missing required data'}), 400
    
    valid_files = [f for f in files if f and allowed_file(f.filename)]
    
    if not valid_files:
        return jsonify({'error': 'No valid files to process'}), 400
    
    try:
        # Generate invoice using the data from the frontend
        invoice_path = generate_invoice(invoice_data)
        
        # Add the generated invoice to the list of files to process
        with open(invoice_path, 'rb') as invoice_file:
            invoice_file_obj = io.BytesIO(invoice_file.read())
            invoice_file_obj.name = os.path.basename(invoice_path)
            valid_files.append(invoice_file_obj)
        
        merged_filename = process_files(valid_files, template_name, date)
        return jsonify({'success': True, 'file': merged_filename})
    except Exception as e:
        logger.error(f"Error processing files: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/download/<filename>')
def download_file(filename):
    try:
        file_obj = s3_client.get_object(Bucket=S3_BUCKET_NAME, Key=filename)
        return send_file(
            io.BytesIO(file_obj['Body'].read()),
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )
    except ClientError as e:
        return str(e), 404

if __name__ == '__main__':
    app.run(debug=False)

================
File: generate_invoice.js
================
const fs = require('fs');
const carbone = require('carbone');
const path = require('path');

console.log('Starting invoice generation');

function generateInvoice(data, callback) {
  console.log('Received data:', JSON.stringify(data, null, 2));

  const invoicesDir = path.join(__dirname, 'invoices');
  if (!fs.existsSync(invoicesDir)) {
    console.log('Creating invoices directory');
    fs.mkdirSync(invoicesDir, { recursive: true });
  }

  const templatePath = path.join(__dirname, 'KUITANSI_FINAL.docx');
  console.log('Template path:', templatePath);

  if (!fs.existsSync(templatePath)) {
    console.error('Template file does not exist!');
    return callback(new Error('Template file not found'));
  }

  console.log('Rendering with Carbone');
  carbone.render(templatePath, data, function(err, result) {
    if (err) {
      console.error('Carbone render error:', err);
      return callback(err);
    }

    console.log('Carbone render complete, writing file');
    const outputPath = path.join(invoicesDir, `invoice_${Date.now()}.docx`);
    fs.writeFile(outputPath, result, (err) => {
      if (err) {
        console.error('Error writing file:', err);
        return callback(err);
      }
      console.log('Invoice generated successfully');
      console.log('OUTPUT_PATH:' + outputPath);
      callback(null, outputPath);
    });
  });
}

const jsonData = process.argv[2];

try {
  const data = JSON.parse(jsonData);
  generateInvoice(data, (err, outputPath) => {
    if (err) {
      console.error('Error generating invoice:', err);
      process.exit(1);
    }
    process.exit(0);
  });
} catch (error) {
  console.error('Error parsing JSON:', error);
  process.exit(1);
}

================
File: package.json
================
{
    "name": "spj-generator",
    "version": "1.0.0",
    "engines": {
      "node": "14.x"
    },
    "dependencies": {
      "carbone": "^3.2.3"
    }
  }

================
File: Procfile
================
web: gunicorn app:app

================
File: README.md
================
# spj-generator

================
File: requirements.txt
================
Babel==2.15.0
blinker==1.8.2
boto3==1.34.156
botocore==1.34.156
click==8.1.7
docxcompose==1.4.0
fire==0.6.0
Flask==3.0.3
fonttools==4.53.1
gunicorn==22.0.0
itsdangerous==2.2.0
Jinja2==3.1.4
jmespath==1.0.1
lxml==5.2.2
MarkupSafe==2.1.5
numpy==2.0.1
opencv-python-headless==4.10.0.84
packaging==24.1
pdf2docx==0.5.8
pillow==10.4.0
PyMuPDF==1.24.9
PyMuPDFb==1.24.9
python-dateutil==2.9.0.post0
python-docx==1.1.2
python-dotenv==1.0.1
s3transfer==0.10.2
setuptools==72.1.0
six==1.16.0
termcolor==2.4.0
typing_extensions==4.12.2
urllib3==2.2.2
Werkzeug==3.0.3
subprocess.run
